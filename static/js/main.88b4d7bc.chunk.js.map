{"version":3,"sources":["components/Navbar/Navbar.js","components/Scorecard/Scorecard.js","components/Wrapper/Wrapper.js","components/Puppycard/Puppycard.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","Scorecard","props","console","log","score","topscore","alert","Container","fluid","children","Row","Col","size","split","map","join","Puppycard","onClick","handleOnClick","id","src","image","alt","name","App","state","puppies","clickedPuppies","includes","setState","push","length","i","j","Math","floor","random","this","topScore","correct","correctguess","wrong","wrongguess","puppy","key","img","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.88b4d7bc.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Navbar() {\n    return (\n        <nav className=\"navbar navbar-light bg-light\">\n            <h1 className=\"navbar-brand mb-0 h1\">Clicky Game!</h1>\n            \n        </nav>\n    );\n}\n\nexport default Navbar;","import React from \"react\";\n\nfunction Scorecard(props) {\n    console.log(props)\n    return (\n        <div>\n            <p>Click on a puppy to earn points, but if you click on the same puppy more than once you restart the game.</p>\n            <div>\n            <h5>Your Score: {props.score} </h5>\n        \n            <h5>Top Score: {props.topscore}</h5>\n            </div>\n\n\n            <p>{props.alert}</p>\n        </div>\n    );\n}\n\nexport default Scorecard;","import React from \"react\";\n\n// Exporting the Container, Row, and Col components from this file\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport function Container({ fluid, children }) {\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport function Row({ fluid, children }) {\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\nexport function Col({ size, children }) {\n  return (\n    <div\n      className={size\n        .split(\" \")\n        .map(size => \"col-\" + size)\n        .join(\" \")}\n    >\n      {children}\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./Puppycard.css\";\n\nfunction Puppycard(props) {\n    return (\n        <div className=\"card-deck puppyrow\">\n            <div className=\"card-img-top puppycard\" onClick={() => props.handleOnClick(props.id)}>\n                <img className=\"puppyimage\" src={props.image} alt={props.name} />\n            </div>\n        </div>\n    );\n}\n\nexport default Puppycard;","import React, { Component } from 'react';\nimport Navbar from \"./components/Navbar/Navbar.js\";\nimport Scorecard from \"./components/Scorecard/Scorecard.js\";\nimport { Container, Col, Row } from \"./components/Wrapper/Wrapper.js\";\nimport Puppycard from \"./components/Puppycard/Puppycard.js\";\nimport puppies from \"./puppies.json\";\n\nclass App extends Component {\n  state = {\n    puppies,\n    score: 0,\n    topscore: 0,\n    alert: \"\",\n    clickedPuppies: []\n  }\n\n\n  handleOnClick = id => {\n    let clickedPuppies = this.state.clickedPuppies;\n    let score = this.state.score;\n    let topscore = this.state.topscore;\n\n    if(clickedPuppies.includes(id)) {\n      this.setState({ clickedPuppies: [], score: 0, topscore: 0, alert: \"You already guess that pup! Better luck next time.\" })\n    } else {\n      clickedPuppies.push(id)\n\n      if (clickedPuppies === 12) {\n        this.setState({ topscore: 12, alert: \"You won! Nice job\", clickedPuppies: [] });\n      } else if (score > topscore) {\n        topscore = score\n      }\n\n      this.setState({ puppies, clickedPuppies, score: clickedPuppies.length, topscore: topscore, alert: \"You guessed correct! Keep going.\" });\n\n      for (let i = puppies.length -1; i> 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n      [puppies[i], puppies[j]] = [puppies[j], puppies[i]];\n      }\n    }\n  }\n\n\n  render() {\n    return (\n      <Container fluid>\n        <Row>\n          <Col size=\"md-12\">\n            <Navbar />\n          </Col>\n        </Row>\n\n        <Row>\n          <Col size=\"md-12\">\n            <Scorecard score={this.state.score} topScore={this.state.topscore} correct={this.state.correctguess} wrong={this.state.wrongguess} alert={this.state.alert}/>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col size=\"md-10\">\n            {this.state.puppies.map(puppy => (\n              <Puppycard\n              id={puppy.id}\n              key={puppy.name}\n              image={puppy.img}\n              handleOnClick={this.handleOnClick}\n              />\n            ))}\n          </Col>\n        </Row>\n        \n        \n        \n        </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}